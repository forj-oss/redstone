#!/bin/bash
# Copyright 2013 Hewlett-Packard Development Company, L.P

_NEW_PROJECT_NAME=$1
_NEW_GROUP_NAME=$_NEW_PROJECT_NAME #$2
_NEW_PROJECT_DESCRIPTION="description for $_NEW_PROJECT_NAME project" #$3
_GIT_USER="<%= scope.lookupvar("::runtime_project::params::gerrit_user") %>" #"forjio"
_GIT_USER_NAME="<%= scope.lookupvar("::runtime_project::params::gerrit_username") %>" #"Forj Configuration User" 
_GIT_USER_EMAIL="<%= scope.lookupvar("::runtime_project::params::gerrit_useremail") %>" #"forjio@localhost.org" 
_GIT_PROJECT="<%= scope.lookupvar("::runtime_project::params::config_project") %>" #"forj-config" 
_REVIEW_SERVER="<%= scope.lookupvar("::runtime_gerrit_ip") %>" #"15.185.244.212" 
_GIT_SSH_CONFIG="<%= scope.lookupvar("::runtime_project::params::gerrit_config_dir") %>/$_GIT_USER.config" #"/opt/config/cacerts/ssh_keys/config/forjio.config" 
_SSH_CMD="<%= scope.lookupvar("::runtime_project::params::ssh_cmd") %> -oStrictHostKeyChecking=no -i <%= scope.lookupvar("::runtime_project::params::gerrit_pem") %> -p <%= scope.lookupvar("::runtime_project::params::gerrit_port") %> $_GIT_USER@$_REVIEW_SERVER"
#"/usr/bin/ssh -oStrictHostKeyChecking=no -i /opt/config/cacerts/ssh_keys/forjio -p 29418 $_GIT_USER@$_REVIEW_SERVER"
_WORKSPACE="<%= scope.lookupvar("::runtime_project::params::git_home") %>/workspace/$$"
_LOG_FOLDER="<%= scope.lookupvar("::runtime_project::params::git_home") %>/workspace/log"
_LOG_FILE="${_LOG_FOLDER}/$(date '+%Y-%m-%d-%H%M%S').log"

exec 1>$_LOG_FILE 2>&1

mkdir -p $_WORKSPACE
mkdir -p $_LOG_FOLDER
cd $_WORKSPACE
echo 'Creating Project ...'
export GIT_SSH=$_GIT_SSH_CONFIG
_RESPONSE=$($_SSH_CMD -T > /dev/null 2<&1; echo $?)
if !(test $_RESPONSE -eq 127) then
    echo 'forj-config repo is not available.'
    exit 1
fi

if ($_SSH_CMD gerrit ls-projects | grep $_NEW_PROJECT_NAME) then
    echo 'The project already exists, choose another name.'
    exit 1
fi

git clone ssh://$_GIT_USER@$_REVIEW_SERVER:29418/$_GIT_PROJECT

if [[ $_NEW_PROJECT_NAME == */* ]]
then
  var=$(echo $_NEW_PROJECT_NAME | awk -F"/" '{print $1}')
  mkdir "$_WORKSPACE/$_GIT_PROJECT/modules/runtime_project/files/gerrit/acls/production/$var"
fi

_PROJECT_CONFIG="$_WORKSPACE/$_GIT_PROJECT/modules/runtime_project/files/gerrit/acls/production/$_NEW_PROJECT_NAME.config"
_PROJECTS_YAML="$_WORKSPACE/$_GIT_PROJECT/modules/runtime_project/templates/gerrit/config/production/review.projects.yaml.erb"
if [ ! -f "${_PROJECTS_YAML}" ] ; then
  echo "${_GIT_PROJECT} not ready... missing ${_PROJECTS_YAML}, skipping"
  exit 1
fi
echo 'creating files...'
echo "[access \"refs/heads/*\"]
        label-Approved = +0..+1 group $_NEW_GROUP_NAME-core
        label-Code-Review = -2..+2 group $_NEW_GROUP_NAME-core
[access \"refs/tags/*\"]
        create = group $_NEW_GROUP_NAME-core
        pushTag = group $_NEW_GROUP_NAME-core
[project]
        state = active
[receive]
        requireChangeId = true
[submit]
        mergeContent = true" > $_PROJECT_CONFIG

echo "- project: $_NEW_PROJECT_NAME
  description: $_NEW_PROJECT_DESCRIPTION" >> $_PROJECTS_YAML

cd $_WORKSPACE/$_GIT_PROJECT/
wget -O .git/hooks/commit-msg https://$_REVIEW_SERVER/tools/hooks/commit-msg --no-check-certificate
chmod +x .git/hooks/commit-msg
git config user.name "$_GIT_USER_NAME"
git config user.email $_GIT_USER_EMAIL
git add $_PROJECT_CONFIG
git add $_PROJECTS_YAML
git commit -m "Adding $_NEW_PROJECT_NAME project to gerrit from the UI"
#git push origin refs/heads/master
git push origin HEAD:refs/for/master
git config --unset-all user.name
git config --unset-all user.email

#Cleaning workspace
echo 'removing workspace process'
rm -r $_WORKSPACE

exit 0